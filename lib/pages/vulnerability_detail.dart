import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:makepdfs/models/vulnerableT.dart';
import 'package:makepdfs/pages/pdfexport/pdfpreview_vulnerable.dart';

import '../services/database.dart';
import 'location_date.dart';

//All the necessary text controllers


final hazardProfController = TextEditingController();
final popHighController = TextEditingController();
final popMedController = TextEditingController();
final popLowController = TextEditingController();
final elderHighController = TextEditingController();
final elderMedController = TextEditingController();
final elderLowController = TextEditingController();
final childHighController = TextEditingController();
final childMedController = TextEditingController();
final childLowController = TextEditingController();
final hsEdHighController = TextEditingController();
final hsEdMedController = TextEditingController();
final hsEdLowController = TextEditingController();
final linIsoHighController = TextEditingController();
final linIsoMedController = TextEditingController();
final linIsoLowController = TextEditingController();
final pocHighController = TextEditingController();
final pocMedController = TextEditingController();
final pocLowController = TextEditingController();
final lincHighController = TextEditingController();
final lincMedController = TextEditingController();
final lincLowController = TextEditingController();
final nheHighController = TextEditingController();
final nheMedController = TextEditingController();
final nheLowController = TextEditingController();
final housingHighController = TextEditingController();
final housingMedController = TextEditingController();
final housingLowController = TextEditingController();
final schoolsHighController = TextEditingController();
final schoolsMedController = TextEditingController();
final schoolsLowController = TextEditingController();
final hospHighController = TextEditingController();
final hospMedController = TextEditingController();
final hospLowController = TextEditingController();
final wasteHighController = TextEditingController();
final wasteMedController = TextEditingController();
final wasteLowController = TextEditingController();
final elecHighController = TextEditingController();
final elecMedController = TextEditingController();
final elecLowController = TextEditingController();
final waterHighController = TextEditingController();
final waterMedController = TextEditingController();
final waterLowController = TextEditingController();
final wasteWaterHighController = TextEditingController();
final wasteWaterMedController = TextEditingController();
final wasteWaterLowController = TextEditingController();
final essenHighController = TextEditingController();
final essenMedController = TextEditingController();
final essenLowController = TextEditingController();
final summaryController = TextEditingController();


class VulnerabilityDetailPage extends StatelessWidget {
  final VulnerableT vulnerableT;
  const VulnerabilityDetailPage({
    Key? key,
    required this.vulnerableT,
  }) : super(key: key);



  @override
  Widget build(BuildContext context) {
    set_default_values(vulnerableT);
    return Scaffold(
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          //sending the data from the text controllers to the pdf handler
          vulnerableT.hazardProf = hazardProfController.text;
          vulnerableT.popHigh = popHighController.text;
          vulnerableT.popMed = popMedController.text;
          vulnerableT.popLow = popLowController.text;
          vulnerableT.elderHigh = elderHighController.text;
          vulnerableT.elderMed = elderMedController.text;
          vulnerableT.elderLow = elderLowController.text;
          vulnerableT.childHigh = childHighController.text;
          vulnerableT.childMed = childMedController.text;
          vulnerableT.childLow = childLowController.text;
          vulnerableT.hsEdHigh = hsEdHighController.text;
          vulnerableT.hsEdMed = hsEdMedController.text;
          vulnerableT.hsEdLow = hsEdLowController.text;
          vulnerableT.linIsoHigh = linIsoHighController.text;
          vulnerableT.linIsoMed = linIsoMedController.text;
          vulnerableT.linIsoLow = linIsoLowController.text;
          vulnerableT.pocHigh = pocHighController.text;
          vulnerableT.pocMed = pocMedController.text;
          vulnerableT.pocLow = pocLowController.text;
          vulnerableT.lincHigh = lincHighController.text;
          vulnerableT.lincMed = lincMedController.text;
          vulnerableT.lincLow = lincLowController.text;
          vulnerableT.nheHigh = nheHighController.text;
          vulnerableT.nheMed = nheMedController.text;
          vulnerableT.nheLow = nheLowController.text;
          vulnerableT.housingHigh = housingHighController.text;
          vulnerableT.housingMed = housingMedController.text;
          vulnerableT.housingLow = housingLowController.text;
          vulnerableT.schoolsHigh = schoolsHighController.text;
          vulnerableT.schoolsMed = schoolsMedController.text;
          vulnerableT.schoolsLow = schoolsLowController.text;
          vulnerableT.hospHigh = hospHighController.text;
          vulnerableT.hospMed = hospMedController.text;
          vulnerableT.hospLow = hospLowController.text;
          vulnerableT.wasteHigh = wasteHighController.text;
          vulnerableT.wasteMed = wasteMedController.text;
          vulnerableT.wasteLow = wasteLowController.text;
          vulnerableT.elecHigh = elecHighController.text;
          vulnerableT.elecMed = elecMedController.text;
          vulnerableT.elecLow = elecLowController.text;
          vulnerableT.waterHigh = waterHighController.text;
          vulnerableT.waterMed = waterMedController.text;
          vulnerableT.waterLow = waterLowController.text;
          vulnerableT.wasteWaterHigh = wasteWaterHighController.text;
          vulnerableT.wasteWaterMed = wasteWaterMedController.text;
          vulnerableT.wasteWaterLow = wasteWaterLowController.text;
          vulnerableT.essenHigh = essenHighController.text;
          vulnerableT.essenMed = essenMedController.text;
          vulnerableT.essenLow = essenLowController.text;
          vulnerableT.summary = summaryController.text;

          Navigator.of(context).push(MaterialPageRoute(
            builder: (context) => PdfPreviewVulnerablePage(vulnerableT: vulnerableT),
            ),
          );

          String location_date = LocationDatePage().getLocation() + " " + LocationDatePage().getDate() + " " + LocationDatePage.getUID();

          //update forms
          await DatabaseService().updateVulnerableData(location_date, vulnerableT);
        },
        child: Icon(Icons.picture_as_pdf),
      ),
      appBar: AppBar(
        title: Text(vulnerableT.name),
      ),
      body: ListView(
        children: [
          Padding(padding: EdgeInsets.all(11)),
          Row(
            children: [
              Container(
                padding: EdgeInsets.only(top: 25, left: 10, bottom: 7),
                child: Text(
                  "Hazard Profile:",
                  style: TextStyle(
                      fontSize: 16
                  ),
                ),
              ),
              Padding(padding: EdgeInsets.all(5)),
              Expanded(
                child: TextField(controller: hazardProfController),
              ),
            ],
          ),

          Container(
            padding: EdgeInsets.only(top: 25, left: 10, bottom: 7),
            child: Text(
              "Locations of elements at \nrisk specific to the hazard:",
              style: TextStyle(
                  fontSize: 16
              ),
            ),
          ),

          Table(
            //border: TableBorder.all(color: PdfColors.black),
            children: [

              TableRow(
                children: [
                  Expanded(
                    child: PaddedText(""),
                    flex: 1,
                  ),
                  Expanded(
                    child: PaddedText("High Vul."),
                    flex: 1,
                  ),
                  Expanded(
                    child: PaddedText("Med. Vul."),
                    flex: 1,
                  ),
                  Expanded(
                    child: PaddedText("Low Vul."),
                    flex: 1,
                  ),
                ],
              ),
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText(""),
                    flex: 1,
                  ),
                  Expanded(
                    child: PaddedText("< 0.5 mi."),
                    flex: 1,
                  ),
                  Expanded(
                    child: PaddedText("0.5 - 1.0 mi."),
                    flex: 1,
                  ),
                  Expanded(
                    child: PaddedText("> 1.0 mi."),
                    flex: 1,
                  ),
                ],
              ),
             ]
          ),

          Container(
            padding: EdgeInsets.only(left: 10, bottom: 7),
            child: Text(
              "Elements At \nRisk:",
              style: TextStyle(
                  fontSize: 16
              ),
            ),
          ),

         Table(
            children: [
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("Total Population"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: popHighController,
                        // Keyboard type set to numbers only
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: popMedController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: popLowController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                ],
              ),

              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("Elderly(65+)"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: elderHighController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: elderMedController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: elderLowController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                ],
              ),
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("Children <5"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: childHighController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: childMedController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: childLowController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                ],
              ),
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("<HS Education"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: hsEdHighController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: hsEdMedController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: hsEdLowController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                ],
              ),
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("Linguistic isolation"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: linIsoHighController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: linIsoMedController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: linIsoLowController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                ],
              ),
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("People of color"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: pocHighController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: pocMedController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: pocLowController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                ],
              ),
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("Low income"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: lincHighController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: lincMedController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: lincLowController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                ],
              ),
            ]
          ),

             Container(
                padding: EdgeInsets.only(top: 25, left: 10, bottom: 7),
                child: Text(
                  "Non-Human \nElements:",
                  style: TextStyle(
                      fontSize: 16
                  ),
                ),
             ),

            Table(
              children: [
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("Housing units"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: housingHighController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: housingMedController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: housingLowController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                ],
              ),
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("Schools"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: schoolsHighController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: schoolsMedController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: schoolsLowController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                ],
              ),
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("Hospitals/Clinics"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: hospHighController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: hospMedController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(
                        controller: hospLowController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                ],
              ),
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("S-fund/hazardous waste sites"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: wasteHighController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: wasteMedController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: wasteLowController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                ],
              ),
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("Electric supply center"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: elecHighController,
                        keyboardType: TextInputType.number),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: elecMedController,
                        keyboardType: TextInputType.number),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: elecLowController,
                        keyboardType: TextInputType.number),
                    flex: 1,
                  ),
                ],
              ),
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("Water supply center"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: waterHighController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: waterMedController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: waterLowController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                ],
              ),
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("Wastewater center"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: wasteWaterHighController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: wasteWaterMedController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: wasteWaterLowController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                ],
              ),
              TableRow(
                children: [
                  Expanded(
                    child: PaddedText("Essential businesses"),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: essenHighController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: essenMedController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                  Expanded(
                    child: TextField(controller: essenLowController,
                        keyboardType: TextInputType.number,
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(RegExp('[0-9]'))
                        ]),
                    flex: 1,
                  ),
                ],
              ),
            ],
          ),
          Row(
              children: [
                Container(
                  padding: EdgeInsets.only(top: 25, left: 10, bottom: 7),
                  child: Text(
                    "Summary:",
                    style: TextStyle(
                        fontSize: 16
                    ),
                  ),
                ),
                Padding(padding: EdgeInsets.all(5)),
                Expanded(
                  child: TextField(controller: summaryController),
                ),
              ]
          ),
          Padding(padding: EdgeInsets.all(21)),
        ],
      ),
    );
  }
}

Widget PaddedText(
    final String text, {
      final TextAlign align = TextAlign.left,
    }) =>
    Padding(
      padding: EdgeInsets.all(15),
      child: Text(
        text,
        textAlign: align,
      ),
    );

void set_default_values(VulnerableT vulnerableT)
{
   hazardProfController.text = vulnerableT.hazardProf;
   popHighController.text = vulnerableT.popHigh;
   popMedController.text = vulnerableT.popMed;
   popLowController.text = vulnerableT.popLow;
   elderHighController.text = vulnerableT.elderHigh;
   elderMedController.text = vulnerableT.elderMed;
   elderLowController.text = vulnerableT.elderLow;
   childHighController.text = vulnerableT.childHigh;
   childMedController.text = vulnerableT.childMed;
   childLowController.text = vulnerableT.childLow;
   hsEdHighController.text = vulnerableT.hsEdHigh;
   hsEdMedController.text = vulnerableT.hsEdMed;
   hsEdLowController.text = vulnerableT.hsEdLow;
   linIsoHighController.text = vulnerableT.linIsoHigh;
   linIsoMedController.text = vulnerableT.linIsoMed;
   linIsoLowController.text = vulnerableT.linIsoLow;
   pocHighController.text = vulnerableT.pocHigh;
   pocMedController.text = vulnerableT.pocMed;
   pocLowController.text = vulnerableT.pocLow;
   lincHighController.text = vulnerableT.lincHigh;
   lincMedController.text = vulnerableT.lincMed;
   lincLowController.text = vulnerableT.lincLow;
   nheHighController.text = vulnerableT.nheHigh;
   nheMedController.text = vulnerableT.nheMed;
   nheLowController.text = vulnerableT.nheLow;
   housingHighController.text = vulnerableT.housingHigh;
   housingMedController.text = vulnerableT.housingMed;
   housingLowController.text = vulnerableT.housingLow;
   schoolsHighController.text = vulnerableT.schoolsHigh;
   schoolsMedController.text = vulnerableT.schoolsMed;
   schoolsLowController.text = vulnerableT.schoolsLow;
   hospHighController.text = vulnerableT.hospHigh;
   hospMedController.text = vulnerableT.hospMed;
   hospLowController.text = vulnerableT.hospLow;
   wasteHighController.text = vulnerableT.wasteHigh;
   wasteMedController.text = vulnerableT.wasteMed;
   wasteLowController.text = vulnerableT.wasteLow;
   elecHighController.text = vulnerableT.elecHigh;
   elecMedController.text = vulnerableT.elecMed;
   elecLowController.text = vulnerableT.elecLow;
   waterHighController.text = vulnerableT.waterHigh;
   waterMedController.text = vulnerableT.waterMed;
   waterLowController.text = vulnerableT.waterLow;
   wasteWaterHighController.text = vulnerableT.wasteWaterHigh;
   wasteWaterMedController.text = vulnerableT.wasteWaterMed;
   wasteWaterLowController.text = vulnerableT.wasteWaterLow;
   essenHighController.text = vulnerableT.essenHigh;
   essenMedController.text = vulnerableT.essenMed;
   essenLowController.text = vulnerableT.essenLow;
   summaryController.text = vulnerableT.summary;
}